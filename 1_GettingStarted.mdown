# Getting Started with Fast Random Stock Image, a CRUD REST API for Creative Cloud Products

## Contents

"Fast Random Stock Image" is a CRUD REST API pulls stock images from Stock CC for placement into Illustrator, InDesign, Photoshop, or Premiere.  The user specifies the number and sizes of the image required, as well as any desired image tags, and Stock places the images into the right places in the prepared InDesign document.

## Prerequisites

1. Here is a list of requirements to get you started. You will need:
  1. An Adobe Creative Cloud ID
  1. To be an approved Adobe CC Developer. If you aren't already, apply [here].
  1. An Adobe Stock subscription. 10 standard assets are free, [read more here](https://stock.adobe.com).
  1. An API key. Generate yours by clicking [here].

## Setting the context

- This API is the visual equivalent of a graphic designer's "[Lorem ipsum](https://www.lipsum.com/)" text. With a few input variables, designers can quickly pull almost-random stock images into a page layout. The user may also optionally to cover each image with an "Artwork not final" watermark.
- Is this RESTful API the right one for your project?  TBD filler text about why you might want to use another method.
- Here are [a few sample documents in different file formats] which you can download for use in the examples below. 

## A compelling use case

Pat is a graphic designer waiting on the final artwork approval for a project. Pat needs to have the design team approve the layout soon, and wants a to quickly populate a long InDesign document with stock photographs of mammals.  Using this API and a few lines of code, Pat is able to automatically fill the document with random mammal photos in a matter of minutes.

## Your First Program

This section ideally contains amazingly verbose code snippets aimed at beginning programmers.
 
 1. You're ready to get started. Open this [example document] and you will find this "id tag" in several locations:

     ```javascript
      ;;#IDtag;;
     ```

  The IDtag is placed anywhere in the document a stock image or other asset will go.  

 2. You'll need to find the local file path of the document, or the online URL if the document is stored online.  This [example document] is stored in /Users/student/Documents/ITP/ExampleDock.doc so the local file path looks like this:
     ```javascript
      file://localhost/Users/student/Documents/ITP/ExampleDock.indd
     ```
 3. Use the GET command to find all the IDtags. The "initial scan" function will return the number of assets to be retrieved, as well as assign an ID number to the IDtags in the document.

   ### Snippet 1
   ```javascript
      GET  file://localhost/Users/student/Documents/ITP/ExampleDock.indd?#IDtag=findIDs  
                     //find all the instances of #IDtag and assign ID numbers
   ```
  The findIDs function searches through document and creates ID numbers for each IDtag. If the IDtag is located inside of a box or other shape object in InDesign, Illustrator, or Photoshop, the function assigns a size variable to the associated ID. In the case of Premiere or a Photoshop animation, the IDtag is associated with the size and length of time.

 4. In this example, we're only looking for mammals

  ### Snippet 2
  ```javascript
     GET https://stock.adobe.io/Rest/Media/1/Search/Files?locale=en-US&search_parameters%5Bwords%5D=mammals&search_parameters%5Blimit%=pngs%5Bassign=IDtag  
                           //Search Adobe Stock for images of mammals, only of the filetype.png, 
                           and assign one to each IDtag in the document.
     TARGET file://localhost/Users/student/Documents/ITP/ExampleDock.indd 
                          //Target file path and location
  ```
 5. You can also update and delete images from the document based on the image tags.  For example, if the mammal results contain too many images of sloths, you can run the following to delete any images with the sloth tag and update them with a different random mammal image:

  ### Snippet 3 
  ```javascript
     DELETE file://localhost/Users/student/Documents/ITP/ExampleDock.indd%=tag=sloth
     UPDATE https://stock.adobe.io/Rest/Media/1/Search/Files?locale=en-US&search_parameters%5Bwords%5D=mammals&search_parameters%5Blimit%=pngs%5Bassign=IDtag  
  ```

 - We're ready to make our first API call and find random images tagged "Hello World"
   
    ### Snippet 3

      ```javascript
     GET https://stock.adobe.io/Rest/Media/1/Search/Files?locale=en-US&search_parameters%5Bwords%5D=hello+world&search_parameters%5Bassign=IDtag  
                //Search Adobe Stock for images tagged "hello world" and assign one to each IDtag in the document.
     TARGET file://localhost/Users/student/Documents/ITP/ExampleDock.indd 
                //Target file path and location
  ```
* **URL Structure**

  The URLs for each call need to be structured as follows:

  ```
  https://stock.adobe.io/Rest/Media/1/Search/Files?locale=Country/search_parameters/tags/filetype/exclude
  ```

* **Method:**
  
  The following methods are allowed

  `GET` | `DELETE` | `UPDATE` | `TARGET`
  
*  **URL Params**

   **Required:**
 
   `tags=[alphanumeric]`
   `IDtag=[integer]`
   `locale=[alphanumeric]`

   **Optional:**
 
   `filetype=[alphanumeric]`
   `exclude=[alphanumeric]`

## Error Examples

  * **Code:** 401 UNAUTHORIZED <br />
    **Content:** `{ error : "Log into Adobe CC" }`

    You must be logged into Adobe CC and have a valid Adobe Stock account (beyond the 10 free images).

  * **Code:** 422 UNPROCESSABLE ENTRY <br />
    **Content:** `{ error : "Invalid tag" }`

    The tag you specified doesn't exist in Adobe Stock. Check the spelling, or try searching Adobe Stock directly for a similar tag.

  * **Code:** 402 PAYMENT REQUIRED <br />
    **Content:** `{ error : "Payment Required for the requested images" }

  * **Code:** 405 METHOD NOT ALLOWED <br />
    **Content:** `{ error : "Invalid method" }`

    The GET method can only be used with stock.adobe.io, while UPDATE, DELETE, and TARGET can only be used with local files, or files not hosted on stock.adobe.io that you are able to access.


### Here are a couple well-chosen screenshots of this API in action


## Where to get help
   - The dedicated community forum
   - a hash tag on twitter
   - the stackoverflow tag
   - How to contact us

## Reference
   - API Status Page 
   - Glossary
   - Specifications
   - Terms of Use
   - Legal



