# Getting Started with Fast Random Stock Image, a CRUD REST API for Creative Cloud Products

The following uses an elaborate theoretical API as an example.  Here is [a less detailed, outline version](https://github.com/ErinFinnegan/AdobeApplication/blob/cdb7a1b6106413773c362829b0b17bbdfccab791/GettingStartedEF01.mdown) of the API doc in case a shorter document is preferred for this audience.

## Contents

"Fast Random Stock Image" is a CRUD REST API that pulls stock images from Stock CC for placement into Illustrator, InDesign, Photoshop, or Premiere.  The user specifies the number and sizes of the image required, as well as any desired image tags, and Stock puts the images into the right places in the prepared InDesign document.

1. [Prerequisites](#prerequisites)
2. [Context](#context)
3. [Use Case](#usecase)
4. [Your First Program](#firstprogram)
5. [Hello World](#helloworld)
6. [URL Structure](#urlstructure)
7. [Methods and Parameters](#methods)
8. [Errors](#errors)
9. [Help](#help)
10. [Reference](#reference)
<a name="prerequisites"></a>
## Prerequisites 

Here is a list of requirements to get you started. You will need:
  1. An Adobe Creative Cloud ID
  1. To be an approved Adobe CC Developer. If you aren't already, apply [here].
  1. An Adobe Stock subscription. 10 standard assets are free, [read more here](https://stock.adobe.com).
  1. An API key. Generate yours by clicking [here].
  1. A file to use (Photoshop, Illustrator, InDesign, or Premiere) to be uploaded into your Creative Cloud Library.
<a name="context"></a>
## Setting the context 

- This API is the visual equivalent of a graphic designer's "[Lorem ipsum](https://www.lipsum.com/)" text. With a few input variables, designers can quickly pull almost-random stock images into a page layout.
- Is this RESTful API the right one for your project?  TBD filler text about why you might want to use another method.
- Here are [a few sample documents in different file formats] which you can download for use in the examples below. 
<a name="usecase"></a>
## A compelling use case 

Pat is a graphic designer waiting on the final artwork approval for a project. Pat needs to have the design team approve the layout soon, and wants a to quickly populate a long InDesign document with stock photographs of mammals.  Using this API and a few lines of code, Pat is able to automatically fill the document with random mammal photos in a matter of minutes.
<a name="firstprogram"></a>
## Your First Program 

This section ideally contains amazingly verbose code snippets aimed at beginning programmers.
 
 1. You're ready to get started. Download this [example document] and you will find this "id tag" in several locations:

     ```
      %3BIDtag%3B     
      ```
  The IDtag is placed anywhere in the document a stock image or other asset will go.  

 2. You'll need to upload your file or [the example file] into your Creative Cloud Library. See [these instructions](https://helpx.adobe.com/creative-cloud/help/share.html) for more details on how to upload a file.
 
 3. Click "Send Link" from the drop down arrow of your selected file from your assets.adobe.com/files page, and copy the provided link.
   ```javascript
      https://adobe.ly/mySourceFile
   ```
 4. Use the FIND command to find all the IDtags. This initial scan function will return the number of assets to be retrieved, as well as assign an ID number to the IDtags in the document. The basic format for a FIND call is:
   ```
     FIND https://randomStockImageURL/?myCCfile=SourceFile?APIkey=myAPIkey&IDtag=IDtagnumbers&otherparameters=othervalues
   ```
   For example:

 ### Snippet 1

   ```javascript
      //find all the instances of ```%3BIDtag%3B``` and assign ID numbers
      FIND  https://randomStockImage.adobe.ly/?myCCfile=mySourceFile?APIkey=myAPIkey&IDtag=findIDs
   ```
   The findIDs function searches through document and creates ID numbers for each IDtag. If the IDtag is located inside of a box or other shape object in InDesign, Illustrator, or Photoshop, the function assigns a size variable to the associated ID. In the case of Premiere or a Photoshop animation, the IDtag is associated with the size and length of time.

 4. In this example, we're only looking for mammals

 ### Snippet 2
   ```javascript
      //Search Adobe Stock for images of mammals, only of the filetype.png, and assign one to each IDtag in the document.
      GET https://randomStockImage.adobe.ly/https://randomStockImage.adobe.ly/?myCCfile=mySourceFile?APIkey=myAPIkey&tags=mammals&search_parameters=pngs&assign=IDtag 
   ```
   
 5. You can also update and delete images from the document based on the image tags.  For example, if the mammal results contain too many images of sloths, you can run the following to delete any images with the sloth tag and update them with a different random mammal image:

 ### Snippet 3
   ```javascript
        //Find any images with the tag 'sloth' and update all the IDtags associated with the tag 'sloth' using images without the 'sloth' tag.
        PATCH https://randomStockImage.adobe.ly/?myCCfile=mySourceFile?APIkey=myAPIkey&tags=mammals&exclude=sloth
   ```
<a name="helloworld"></a>
 ## Hello World Recipe 

  We're ready to make our first API call and find random images tagged "Hello World"
   
 ### Snippet 4
  
  Open the [sample document] and you will notice some `%3BIDTag%3B` instances already in place.  Add a few more if you'd like.

   ```javascript
        //Search Adobe Stock for images tagged "hello world" and assign one to each IDtag in the document.
        GET https://randomStockImage.adobe.ly/?myCCfile=mySourceFile?APIkey=myAPIkey&tags=hello+world&assign=IDtag
   ```
   
   ![Hello World image from Adobe Stock](helloworld.png)
   
 ### URL Structure <a name="urlstructure"></a>

  The URLs for each call need to be structured as follows:
  ```
  <protocol>://<host>/?<file path>&<param1>&<param2>&...<paramn>
  ```
 <a name="methods"></a>
 ### Methods and Parameters:

  The following methods are allowed

  `FIND` | `GET` | `PUT` | `PATCH`
  
  Method | Parameters | Input | Requirement |  Notes
 --- | ----- | ----- | ----- | -----
 FIND | IDtag | integer | Required | Used to find all the instances of `%3BIDtag%3B` in the local document
 GET | tags | alphanumeric | Required for GET and PUT| Used to search stock.adobe.io for stock images
 PATCH | IDtag | integer | Required for FIND | Replaces and unassigned instances of `%3BIDtag%3B` in the local document with images specfied in the command
 PUT | APIkey | alphanumeric | Required | Assigns images retrieved in the `GET` into `%3BIDtag%3B` locations in the local document or used to delete images with specified tags from the local document
 PUT | tag | alphanumeric | Optional | Specifies images of requested tag

<a name="errors"></a>
 ### Error Examples 
 
  Code # | Error | Notes 
  --- | --- | ---
  422 UNPROCESSABLE ENTRY | `"Invalid tag" ` | The tag you specified doesn't exist in Adobe Stock. Check the spelling, or try searching Adobe Stock directly for a similar tag.
  402 PAYMENT REQUIRED | `"Payment Required for the requested images" ` | You have exceeded the 10 free images or your payment method is invalid on stock.adobe.io
  405 METHOD NOT ALLOWED |`"Invalid method" ` |  The GET method can only be used with stock.adobe.io, while PATCH, and PUT can only be used with files in your Adobe Creative Cloud Library.

<a name="screenshots"></a>
## Screenshots 
 Here are a couple well-chosen screenshots of this API in action

 [TBA]

## Where to get help <a name="help"></a>
   - The dedicated community forum
   - a hash tag on twitter
   - the stackoverflow tag
   - How to contact us

## Reference <a name="reference"></a>
   - API Status Page 
   - Glossary
   - Specifications
   - Terms of Use
   - Legal



